id : {A : Set} → A → A
 := λ x. x

comp : {A B C : Set} → (B → C) → (A → B) → A → C
 := λ f g x. f (g x)

Iso : Set → Set → Set
 := λ A B. (to    : A → B)
         * (from  : B → A)
         * (eto   : comp from to = id)
         * (efrom : comp to from = id)
         * Top

Id : {A} → Iso A A
  := (id, id, refl, refl, tt)

Comp : {A B C} → Iso B C → Iso A B → Iso A C
  := \f g. ( \a. f.to (g.to a)
           , \c. g.from (f.from c)
           , \a. trans (ap g.from (f.eto (g.to a))) (g.eto a)
           , \c. trans (ap f.to (g.efrom (f.from c))) (f.efrom c)
           , tt)

Idl : {A B} {f : Iso A B} → Comp Id f = f
  := refl

Idr : {A B} {f : Iso A B} → Comp f Id = f
  := refl

Assoc : {A B C D} {f : Iso C D} {g : Iso B C} {h : Iso A B} → Comp f (Comp g h) = Comp (Comp f g) h
  := refl
